name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_APP_NAME: agrotech-ai-app

jobs:
  test-python:
    runs-on: ubuntu-22.04
    name: Python Tests & Quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Python tests and quality checks
        id: python-tests
        uses: ./.github/actions/python-tests
        with:
          python-version: '3.12'

      - name: Upload Python coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: python-coverage-reports
          path: ${{ steps.python-tests.outputs.coverage-path }}

  test-javascript:
    runs-on: ubuntu-22.04
    name: JavaScript Tests & Quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run JavaScript tests and quality checks
        id: js-tests
        uses: ./.github/actions/javascript-tests
        with:
          node-version: '20.18.3'

      - name: Upload JavaScript coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: javascript-coverage-reports
          path: ${{ steps.js-tests.outputs.coverage-path }}

  check-code-statically:
    runs-on: ubuntu-22.04
    name: SonarCloud Analysis
    needs: [test-python, test-javascript]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run static code analysis
        uses: ./.github/actions/static-analysis
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          sonar-token: ${{ secrets.SONAR_TOKEN }}
          python-coverage-artifact: python-coverage-reports
          javascript-coverage-artifact: javascript-coverage-reports
          debug-enabled: 'false'

  build-agrotech-app-image:
    runs-on: ubuntu-22.04
    name: Docker Build and Push API
    needs: [check-code-statically]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and push Docker image
        id: docker-push
        uses: ./.github/actions/docker-push
        with:
          dockerhub-username: ${{ secrets.DOCKERHUB_USERNAME }}
          dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}
          image-name: ${{ env.DOCKER_APP_NAME }}
          tag-version: ${{ github.sha }}
          context-path: '.'
          dockerfile-path: 'env-deployment/Dockerfile'
          push-as-latest: 'false'

  # -------------------------------------
  # Job de Despliegue CloudFormation Staging
  # -------------------------------------
  deploy-cfn-staging:
    needs: build-agrotech-app-image # Depende del job anterior (necesita image_uri)
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Solo en push a main
    steps:
      # 1. Checkout del código (para acceder a template.yaml)
      - name: Checkout code
        uses: actions/checkout@v4
      
      ## 2. Llamar action para desplegar en AWS
      - name: Deploy to Staging
        uses: ./.github/actions/aws-deploy
        with:
          docker-image-uri: "${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_APP_NAME }}:${{ github.sha }}"
          environment-name: staging
          stack-name: agrotech-staging-stack
          cluster-name: agrotech-staging-cluster
          service-name: agrotech-staging-service
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          lab-role-arn: ${{ secrets.LAB_ROLE_ARN }}
          vpc-id: ${{ secrets.VPC_ID }}
          subnet-ids: ${{ secrets.SUBNET_IDS }}

  # -------------------------------------
  # Acceptance Tests on Staging Environment
  # -------------------------------------
  acceptance-tests:
    needs: deploy-cfn-staging
    runs-on: ubuntu-latest
    name: E2E Acceptance Tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run acceptance tests against staging
        id: acceptance-tests
        uses: ./.github/actions/acceptance-tests
        with:
          app-base-url: ${{ needs.deploy-cfn-staging.outputs.alb_url }}
          python-version: '3.12'
          test-debug-mode: 'false'
          wait-time: '30'

      - name: Upload acceptance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: acceptance-test-results
          path: ${{ steps.acceptance-tests.outputs.coverage-path }}

  deploy-cfn-prod:
    needs: acceptance-tests # Depende de los acceptance tests (solo despliega si pasan)
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Solo en push a main
    steps:
      # 1. Checkout del código (para acceder a template.yaml)
      - name: Checkout code
        uses: actions/checkout@v4
      
      ## 2. Llamar action para desplegar en AWS
      - name: Deploy to Prod
        uses: ./.github/actions/aws-deploy
        with:
          docker-image-uri: "${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_APP_NAME }}:${{ github.sha }}"
          environment-name: production
          stack-name: agrotech-production-stack
          cluster-name: agrotech-production-cluster
          service-name: agrotech-production-service
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          lab-role-arn: ${{ secrets.LAB_ROLE_ARN }}
          vpc-id: ${{ secrets.VPC_ID }}
          subnet-ids: ${{ secrets.SUBNET_IDS }}
