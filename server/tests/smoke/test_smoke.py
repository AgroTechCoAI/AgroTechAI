import os
import pytest
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
import logging

DEBUG_MODE = os.environ.get("TEST_DEBUG_MODE", "false")
BASE_URL = os.environ.get("APP_BASE_URL", "http://localhost:3000")

@pytest.fixture
def browser():
    """Configure Chrome browser for testing"""
    if not DEBUG_MODE == "true":
        logging.getLogger('selenium').setLevel(logging.WARNING)
        logging.getLogger('urllib3').setLevel(logging.WARNING)

    options = webdriver.ChromeOptions()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-gpu")
    options.add_argument("--window-size=1920,1080")
    driver = webdriver.Chrome(options=options)
    yield driver
    driver.quit()

def wait_for_websocket_connection(browser, timeout=15):
    """Wait for WebSocket connection to be established"""
    try:
        # Wait for React app to load first
        WebDriverWait(browser, timeout).until(
            lambda driver: driver.execute_script("return document.readyState") == "complete"
        )

        # Wait for React app to be mounted and WebSocket to be established
        WebDriverWait(browser, timeout).until(
            lambda driver: driver.execute_script("""
                // Check if React has mounted and WebSocket is connected
                const app = document.querySelector('[data-reactroot]') || document.querySelector('#root > div');
                if (!app) return false;

                // Look for connection status indicators in the DOM
                const connectionBanner = document.querySelector('.bg-green-100');
                const hasConnectedState = connectionBanner && connectionBanner.textContent.includes('Conectado');

                // Alternative: Check if WebSocket is available and ready
                const hasWebSocketSupport = typeof WebSocket !== 'undefined';

                return hasConnectedState || hasWebSocketSupport;
            """)
        )
        return True
    except TimeoutException:
        return False
    except Exception:
        return False

def wait_for_analysis_result(browser, timeout=60):
    """Wait for analysis result to appear"""
    try:
        print("‚è≥ Waiting for AI agents to complete analysis...")

        # First, wait for the analysis to start (loading states should appear)
        WebDriverWait(browser, 10).until(
            lambda driver: driver.find_elements(By.CSS_SELECTOR, ".animate-pulse") or
                          "Analizando" in driver.page_source or
                          "an√°lisis" in driver.page_source.lower()
        )

        # Then wait for analysis to complete (skeleton animations to disappear)
        result = WebDriverWait(browser, timeout).until(
            lambda driver: (
                # Check if skeleton loading is gone AND we have actual data
                len(driver.find_elements(By.CSS_SELECTOR, ".animate-pulse")) == 0 and
                # Look for actual data in agent cards
                (len(driver.find_elements(By.CSS_SELECTOR, ".text-gray-900.font-medium")) > 0 or
                 # Or check for agent names with data
                 ("AgriVision" in driver.page_source and "SoilSense" in driver.page_source))
            )
        )
        return result

    except TimeoutException:
        print("‚ùå Analysis did not complete within timeout")
        return None
    except Exception as e:
        print(f"‚ùå Error waiting for results: {e}")
        return None

def upload_image_file(browser, image_path):
    """Upload an image file using the ImageUpload component"""
    try:
        # Find the hidden file input
        file_inputs = browser.find_elements(By.CSS_SELECTOR, "input#image-upload-input[type='file']")

        if not file_inputs:
            # Try alternative selectors
            file_inputs = browser.find_elements(By.CSS_SELECTOR, "input[type='file']")

        if not file_inputs:
            return False

        file_input = file_inputs[0]

        # Send the file path to the input
        file_input.send_keys(image_path)

        # Wait a moment for the file to be processed
        time.sleep(3)

        # Check if image was uploaded successfully by looking for the image preview
        try:
            WebDriverWait(browser, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "img[alt='Imagen seleccionada']"))
            )
            return True
        except TimeoutException:
            # Check if there's an error message
            if "archivo de imagen v√°lido" in browser.page_source:
                return False

            # Check if the upload button is still visible (might indicate upload failed)
            upload_buttons = browser.find_elements(By.XPATH, "//button[contains(text(), 'Haz clic para subir')]")
            if upload_buttons:
                return False

            return False

    except Exception:
        return False

def fill_environment_description(browser):
    """Fill the environment description textarea"""
    try:
        # Find and fill the environment description textarea
        textarea = browser.find_element(By.ID, "environment-description")
        test_environment = "Humedad del suelo 65%, Temperatura 23¬∞C, pH 6.7, sin viento fuerte, condiciones ideales para el cultivo"
        textarea.clear()
        textarea.send_keys(test_environment)
        return True
    except Exception:
        return False

def submit_analysis_form(browser):
    """Submit the analysis form after uploading image and filling description"""
    try:
        # First, make sure environment description is filled
        if not fill_environment_description(browser):
            return False

        # Wait a moment for form validation
        time.sleep(1)

        # Look for submit button in the ScenarioForm
        submit_buttons = browser.find_elements(By.CSS_SELECTOR, "button[type='submit']:not([disabled])")

        if not submit_buttons:
            # Check if button is disabled
            disabled_buttons = browser.find_elements(By.CSS_SELECTOR, "button[type='submit'][disabled]")
            if disabled_buttons:
                # Check connection status
                if "Desconectado" in browser.page_source:
                    return False

        if not submit_buttons:
            # Fallback: look for any button with text related to analysis
            submit_buttons = browser.find_elements(By.XPATH, "//button[contains(text(), 'Analizar') and not(@disabled)]")

        if submit_buttons:
            button = submit_buttons[0]
            button.click()
            time.sleep(2)  # Wait for form submission to process
            return True

        return False
    except Exception:
        return False

def test_smoke_agrotech_analysis(browser):
    """Smoke test: WebSocket connection + image analysis workflow"""
    print("üî• Starting AgroTech AI smoke test...")

    # Step 1: Load the application
    print("üì± Loading AgroTech AI application...")
    browser.get(BASE_URL)

    # Step 2: Wait for WebSocket connection
    print("üîå Checking WebSocket connection...")
    connection_ready = wait_for_websocket_connection(browser)

    if not connection_ready:
        # Check for connection error and provide better debugging
        error_banner = browser.find_elements(By.CSS_SELECTOR, ".bg-red-100, .bg-yellow-100")
        if error_banner:
            error_text = error_banner[0].text
            pytest.fail(f"‚ùå SMOKE TEST FAILED: WebSocket connection failed. Error: {error_text}")
        else:
            pytest.fail("‚ùå SMOKE TEST FAILED: WebSocket connection not established within timeout")

    print("‚úÖ WebSocket connection established")

    # Step 3: Check that app loaded correctly
    print("üå± Verifying AgroTech AI app loaded...")
    assert "AgroTech" in browser.title, "AgroTech AI application title not found"

    # Wait for React components to fully load
    WebDriverWait(browser, 10).until(
        lambda driver: driver.find_elements(By.CSS_SELECTOR, "input#image-upload-input[type='file']")
    )
    print("‚úÖ Application loaded successfully")

    # Step 4: Upload test image
    print("üñºÔ∏è Uploading test image...")
    test_image_path = os.path.join(os.path.dirname(__file__), "..", "test_images", "sample_crop.jpg")

    # Convert to absolute path for better debugging
    test_image_path = os.path.abspath(test_image_path)

    # Skip if test image doesn't exist
    if not os.path.exists(test_image_path):
        pytest.skip(f"‚ùå SMOKE TEST SKIPPED: Test image not found. Run 'make py-create-test-images' first.")

    upload_success = upload_image_file(browser, test_image_path)
    assert upload_success, "‚ùå SMOKE TEST FAILED: Failed to upload test image"
    print("‚úÖ Image uploaded successfully")

    # Step 5: Submit analysis form
    print("üìã Submitting analysis form...")
    submit_success = submit_analysis_form(browser)
    assert submit_success, "‚ùå SMOKE TEST FAILED: Failed to submit analysis form"
    print("‚úÖ Analysis form submitted successfully")

    # Step 6: Wait for analysis to complete
    result_elements = wait_for_analysis_result(browser, timeout=90)
    assert result_elements is not None, "‚ùå SMOKE TEST FAILED: Analysis did not complete within timeout"
    print("‚úÖ Analysis completed successfully")

    # Step 7: Verify working agents responded
    print("ü§ñ Verifying AI agents responded...")
    page_source = browser.page_source

    # Check for working agents (AgriVision and SoilSense should work with text-only model)
    working_agents = ["AgriVision", "SoilSense"]
    for agent in working_agents:
        assert agent in page_source, f"‚ùå SMOKE TEST FAILED: Agent {agent} not found in results"

    print("‚úÖ Working AI agents responded successfully")

    # Step 8: Verify agent cards are present
    print("üìä Verifying agent result cards...")
    agent_cards = browser.find_elements(By.CSS_SELECTOR, ".bg-white.rounded-lg.shadow-lg")
    assert len(agent_cards) >= 3, f"‚ùå SMOKE TEST FAILED: Expected at least 3 agent cards, found {len(agent_cards)}"
    print(f"‚úÖ Found {len(agent_cards)} agent result cards")

    # Final success message
    print("üéâ SMOKE TEST PASSED: AgroTech AI is working correctly!")
    print("   ‚úÖ WebSocket connection established")
    print("   ‚úÖ Image upload successful")
    print("   ‚úÖ Analysis form submission successful")
    print("   ‚úÖ AI agents completed analysis")
    print("   ‚úÖ Results displayed correctly")
